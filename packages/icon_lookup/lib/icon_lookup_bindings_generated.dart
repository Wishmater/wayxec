// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/icon_lookup.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class IconLookupBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  IconLookupBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  IconLookupBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int sum(
    int a,
    int b,
  ) {
    return _sum(
      a,
      b,
    );
  }

  late final _sumPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.IntPtr)>>(
          'sum');
  late final _sum = _sumPtr.asFunction<int Function(int, int)>();

  void IconLookup_Free(
    IconLookup_String string,
  ) {
    return _IconLookup_Free(
      string,
    );
  }

  late final _IconLookup_FreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(IconLookup_String)>>(
          'IconLookup_Free');
  late final _IconLookup_Free =
      _IconLookup_FreePtr.asFunction<void Function(IconLookup_String)>();

  IconLookup_String IconLookup_Lookup(
    ffi.Pointer<ffi.Char> icon,
  ) {
    return _IconLookup_Lookup(
      icon,
    );
  }

  late final _IconLookup_LookupPtr = _lookup<
          ffi
          .NativeFunction<IconLookup_String Function(ffi.Pointer<ffi.Char>)>>(
      'IconLookup_Lookup');
  late final _IconLookup_Lookup = _IconLookup_LookupPtr.asFunction<
      IconLookup_String Function(ffi.Pointer<ffi.Char>)>();
}

final class IconLookup_String extends ffi.Struct {
  @ffi.Uint64()
  external int len;

  external ffi.Pointer<ffi.Char> ptr;
}
